{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "422f5af7-d163-4c77-b3b6-7d884196c302",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import json\n",
    "from datetime import datetime\n",
    "from typing import Dict, TypedDict, Any, Tuple\n",
    "import numpy as np\n",
    "import boto3\n",
    "import rasterio\n",
    "from rasterio.mask import mask\n",
    "from rasterio.session import AWSSession\n",
    "from shapely.geometry import shape\n",
    "from langgraph.graph import StateGraph, END\n",
    "from langchain_core.runnables import RunnableLambda\n",
    "from langchain.tools import tool\n",
    "\n",
    "\n",
    "def parse_user_message(state: dict) -> dict:\n",
    "    \"\"\"\n",
    "    Parse user message from `state[\"message\"]`, returning aoi, date_range, and thresholds.\n",
    "    \"\"\"\n",
    "    message = state[\"message\"]\n",
    "    geojson_match = re.search(r'\\{.*\\}', message, re.DOTALL)\n",
    "    geojson_str = geojson_match.group(0) if geojson_match else None\n",
    "    geojson = json.loads(geojson_str)\n",
    "\n",
    "    date_match = re.search(r'date range:\\s*(\\d{4}-\\d{2}-\\d{2})\\s*to\\s*(\\d{4}-\\d{2}-\\d{2})', message)\n",
    "    start_date, end_date = date_match.groups()\n",
    "\n",
    "    conf_match = re.search(r'confidence:\\s*([0-9.]+)', message)\n",
    "    intensity_match = re.search(r'intensity:\\s*([0-9.]+)', message)\n",
    "\n",
    "    return {\n",
    "        \"aoi\": geojson,\n",
    "        \"date_range\": (start_date, end_date),\n",
    "        \"thresholds\": {\n",
    "            \"confidence\": float(conf_match.group(1)),\n",
    "            \"intensity\": int(float(intensity_match.group(1)))\n",
    "        }\n",
    "    }\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b05451ec-e1e4-4e67-8a8f-c1636de74743",
   "metadata": {},
   "outputs": [],
   "source": [
    "def filter_and_count_pixels(inputs: Dict) -> Dict:\n",
    "    \"\"\"Filter COG pixels based on AOI, date range, and thresholds; return pixel count.\"\"\"\n",
    "    \n",
    "    aoi = inputs[\"aoi\"]\n",
    "    date_range = inputs[\"date_range\"]\n",
    "    thresholds = inputs[\"thresholds\"]\n",
    "\n",
    "    # Parse date range into days since 2015-01-01\n",
    "    start_date = datetime.strptime(date_range[0], \"%Y-%m-%d\")\n",
    "    end_date = datetime.strptime(date_range[1], \"%Y-%m-%d\")\n",
    "    start_days = (start_date - datetime(2015, 1, 1)).days\n",
    "    end_days = (end_date - datetime(2015, 1, 1)).days\n",
    "\n",
    "    default_path = \"s3://gfw-data-lake/umd_glad_dist_alerts/v20250329/raster/epsg-4326/cog/default.tif\"\n",
    "    intensity_path = \"s3://gfw-data-lake/umd_glad_dist_alerts/v20250329/raster/epsg-4326/cog/intensity.tif\"\n",
    "\n",
    "    session = boto3.Session(profile_name=\"zeno_internal_sso\")\n",
    "    geometry = [shape(aoi[\"geometry\"]).__geo_interface__]\n",
    "\n",
    "    with rasterio.Env(AWSSession(session), AWS_REQUEST_PAYER=\"requester\"):\n",
    "        with rasterio.open(default_path) as src1:\n",
    "            default_data, _ = mask(src1, geometry, crop=True)\n",
    "        with rasterio.open(intensity_path) as src2:\n",
    "            intensity_data, _ = mask(src2, geometry, crop=True)\n",
    "\n",
    "    encoded = default_data[0]\n",
    "    confidence = encoded // 10000\n",
    "    days_since_2015 = encoded % 10000\n",
    "\n",
    "    # Intensity band\n",
    "    intensities = intensity_data[0]\n",
    "\n",
    "    print(\"requested start and end days since 2015: \", start_days, end_days)\n",
    "\n",
    "    # Calculate max number of days since start of 2015\n",
    "    reference_date = datetime(2015, 1, 1)\n",
    "    today = datetime.today()\n",
    "    max_days_since_2015 = (today - reference_date).days\n",
    "    print(f\"days since 2015 in this area of interest — min: {np.min(days_since_2015)}, max: {np.max(days_since_2015[days_since_2015 < max_days_since_2015])}\")\n",
    "\n",
    "\n",
    "    valid_mask = (\n",
    "        (confidence >= thresholds[\"confidence\"]) &\n",
    "        (days_since_2015 >= start_days) &\n",
    "        (days_since_2015 <= end_days) &\n",
    "        (days_since_2015 < max_days_since_2015) &\n",
    "        (intensities >= thresholds[\"intensity\"])\n",
    "    )\n",
    "\n",
    "    return {\"result\": int(np.count_nonzero(valid_mask))}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "d78f4dd1-d1c6-4685-94ea-1322b7d4043c",
   "metadata": {},
   "outputs": [],
   "source": [
    "class GraphState(TypedDict):\n",
    "    aoi: dict         # parsed GeoJSON\n",
    "    date_range: tuple[str, str]\n",
    "    thresholds: dict  # {\"confidence\": int, \"intensity\": int}\n",
    "    result: Any       # final pixel count a.k.a. result object\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "8677ec77-52cd-4cdf-a669-5e6c9a5d0e64",
   "metadata": {},
   "outputs": [],
   "source": [
    "class GraphState(TypedDict):\n",
    "    message: str\n",
    "    aoi: dict\n",
    "    date_range: Tuple[str, str]\n",
    "    thresholds: Dict[str, float]\n",
    "    result: Dict[str, Any]\n",
    "\n",
    "builder = StateGraph(GraphState)\n",
    "\n",
    "builder.add_node(\"parse_message\", RunnableLambda(parse_user_message))\n",
    "builder.add_node(\"filter_and_count\", RunnableLambda(filter_and_count_pixels))\n",
    "\n",
    "builder.set_entry_point(\"parse_message\")\n",
    "builder.add_edge(\"parse_message\", \"filter_and_count\")\n",
    "builder.add_edge(\"filter_and_count\", END)\n",
    "\n",
    "graph = builder.compile()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "4e266d43-4d5d-49f9-a9ac-1bba6ce399d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "#2 is low confidence, 3 is high confidence (1 means nothing and the values should all be >=20,000 and <40,000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "da2e0238-de32-4ddf-870b-8501c35ecdbf",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "requested start and end days since 2015:  365 2191\n",
      "days since 2015 in this area of interest — min: 880, max: 1543\n",
      "{'message': '\\n{\\n  \"type\": \"Feature\",\\n  \"geometry\": {\\n    \"type\": \"Polygon\",\\n    \"coordinates\": [\\n      [\\n        [-75.0, -3.0],\\n        [-70.0, -3.0],\\n        [-70.0, -6.0],\\n        [-75.0, -6.0],\\n        [-75.0, -3.0]\\n      ]\\n    ]\\n  }\\n}\\ndate range: 2016-01-01 to 2020-12-31\\nconfidence: 3\\nintensity: 50\\n', 'aoi': {'type': 'Feature', 'geometry': {'type': 'Polygon', 'coordinates': [[[-75.0, -3.0], [-70.0, -3.0], [-70.0, -6.0], [-75.0, -6.0], [-75.0, -3.0]]]}}, 'date_range': ('2016-01-01', '2020-12-31'), 'thresholds': {'confidence': 3.0, 'intensity': 50}, 'result': 495567}\n"
     ]
    }
   ],
   "source": [
    "# Test AOI over the Peruvian Amazon (Loreto and Ucayali regions)\n",
    "\n",
    "message = \"\"\"\n",
    "{\n",
    "  \"type\": \"Feature\",\n",
    "  \"geometry\": {\n",
    "    \"type\": \"Polygon\",\n",
    "    \"coordinates\": [\n",
    "      [\n",
    "        [-75.0, -3.0],\n",
    "        [-70.0, -3.0],\n",
    "        [-70.0, -6.0],\n",
    "        [-75.0, -6.0],\n",
    "        [-75.0, -3.0]\n",
    "      ]\n",
    "    ]\n",
    "  }\n",
    "}\n",
    "date range: 2016-01-01 to 2020-12-31\n",
    "confidence: 3\n",
    "intensity: 50\n",
    "\"\"\"\n",
    "\n",
    "result = graph.invoke({\"message\": message})\n",
    "print(result)\n",
    "\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
